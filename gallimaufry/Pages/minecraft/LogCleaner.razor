@page "/minecraft/log-cleaner"
@using System.Text.RegularExpressions
@using Match = System.Text.RegularExpressions.Match
@using System.IO
<h3>Minecraft Chat Log Cleaner</h3>

<RadzenRow>
    <RadzenColumn>
        <InputFile OnChange="@LoadFiles"/>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenDropDown TValue="string" @bind-Value="filterName" Data="options" TextProperty="title" ValueProperty="filterValue"/>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Text="Clean" Click="CleanText"/>
    </RadzenColumn>
</RadzenRow>

<RadzenRow>
    <RadzenColumn Size="12">
        <RadzenTextArea @bind-Value="@OutputText" Rows="30" Disabled="true" Style="width: 100%; background-color: lightgrey; color: black; font-weight: bold"/>
    </RadzenColumn>
</RadzenRow>


@code {

    record FilterOption(string title, string filterValue);

    List<FilterOption> options = new()
    {
        new FilterOption("", String.Empty),
        new FilterOption("Client: Chat And Commands", "all"),
        new FilterOption("Client: Only Chat", "chat"),
        new FilterOption("Client: Only IC Chat", "incharacter"),
        new FilterOption("Server: Chat and PMs", "server_ChatAndPM"),
        new FilterOption("Server: Only Chat", "server_chat"),
        new FilterOption("Server: Only PMs", "server_PM"),
        new FilterOption("Server: Only Console", "server_console"),
        new FilterOption("Server: Only Errors In Console", "server_errors")
    };
    private long maxFileSize = 1024000 * 50;
    private bool isLoading;

    public string InputText = "";
    public string OutputText = "";

    public string logType = "client";
    public string filterName = String.Empty;

    public Regex showChatAndCommands = new Regex(@"(?<=\[CHAT\] ).*", RegexOptions.Compiled);
    public Regex ShowOnlyChat = new Regex(@"(?<=\[CHAT\] )\s?\*?\s?\[.*", RegexOptions.Compiled);
    public Regex showICOnly = new Regex(@"(?<=\[CHAT\] )\[(L|Q|Wh|Y|Broadcast).*", RegexOptions.Compiled);

    public Regex server_ChatOnly = new Regex(@"(\[Global\] |\[Broadcast\] |\[Province\] |\[Yell\] |\[Local\] |\[Quiet\] |\[Whisper\] ).*", RegexOptions.Compiled);
    public Regex server_ChatAndPMsOnly = new Regex(@"(\[Global\] |\[Broadcast\] |\[Province\] |\[Yell\] |\[Local\] |\[Quiet\] |\[Whisper\] |((?<=\[Server thread\/INFO\]: ).*(issued server command: \/(msg|r)).*)).*", RegexOptions.Compiled);
    public Regex server_PMsOnly = new Regex(@"(?<=\[Server thread\/INFO\]: ).*(issued server command: /(msg|r)).*", RegexOptions.Compiled);
    public Regex server_ConsoleOnly = new Regex(@"(?<=\[Server thread\/INFO\]: )(?!\*?\s?\[(Global|Broadcast|Province|Yell|Local|Quiet|Whisper)\]).*", RegexOptions.Compiled);
    public Regex server_ErrorsOnly = new Regex(@"(?<=\[Server thread\/ERROR\]: ).*", RegexOptions.Compiled);

    public void CleanText()
    {
        string ret = "";
        // Console.WriteLine("Starting clean");
        MatchCollection x = null;

        switch (filterName)
        {
            case "incharacter":
                x = showICOnly.Matches(InputText);
                break;
            case "chat":
                x = ShowOnlyChat.Matches(InputText);
                break;
            case "all":
                x = showChatAndCommands.Matches(InputText);
                break;
            case "server_ChatAndPM":
                x = server_ChatAndPMsOnly.Matches(InputText);
                break;
            case "server_chat":
                x = server_ChatOnly.Matches(InputText);
                break;
            case "server_PM":
                x = server_PMsOnly.Matches(InputText);
                break;
            case "server_console":
                x = server_ConsoleOnly.Matches(InputText);
                break;
            case "server_errors":
                x = server_ErrorsOnly.Matches(InputText);
                break;
        }

        foreach (Match match in x)
        {
            // Console.WriteLine(match.Value.Replace("issued server command: /msg ", " -> ").Replace("issued server command: /r ", "replied: "));
            ret += match.Value.Replace("issued server command: /msg ", " -> ").Replace("issued server command: /r ", "replied: ");
            ret += "\n\n";
        }
        // Console.WriteLine("Clean Ended");
        OutputText = ret;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        TextReader tr = new StreamReader(e.File.OpenReadStream(maxFileSize));
        string str = await tr.ReadToEndAsync();
        InputText = str;
        isLoading = false;
    }

}